{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","useState","otp","setOtp","data","number","country","setCountry","show","setShow","phone","setPhone","isOTPSent","SetIsOTPSent","error","setError","onSignInSubmit","event","preventDefault","window","recaptchaVerifier","auth","RecaptchaVerifier","size","callback","response","console","log","this","defaultCountry","phoneNumber","appVerifier","signInWithPhoneNumber","then","confirmationResult","catch","className","Container","fluid","Alert","variant","onClose","dismissible","message","Row","Col","xs","md","lg","Form","onSubmit","Label","Group","controlId","Control","as","onChange","e","target","value","map","row","name","InputGroup","Prepend","Text","id","FormControl","aria-describedby","type","placeholder","required","href","otpInput","confirm","result","verificationID","user","alert","fetch","method","res","json","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cc613e6.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: 'AIzaSyDcEjprZB1l8J2GFUmZAzHoFzN3FlzsyhE',\r\n  authDomain: 'phone-auth-503a4.firebaseapp.com',\r\n  projectId: 'phone-auth-503a4',\r\n  storageBucket: 'phone-auth-503a4.appspot.com',\r\n  messagingSenderId: '580293002708',\r\n  appId: '1:580293002708:web:c2ea49b705c159d166c241',\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//import Select from 'react-select';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Container from 'react-bootstrap/Container';\nimport Alert from 'react-bootstrap/Alert';\nimport Image from 'react-bootstrap/Image';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport data from './data.json';\nimport firebase from './firebase';\nimport axios from \"axios\";\n\n// const mappedData = data.map((row) => {\n//   return {\n//     value: row.number,\n//     label: (\n//       <div>\n//         {' '}\n//         {row.name} <img src={row.flag} height=\"30px\" width=\"30px\" />\n//       </div>\n//     ),\n//   };\n// });\nfunction App() {\n  const [otp, setOtp] = useState();\n  const [country, setCountry] = useState(data[0].number);\n  const [show, setShow] = useState(false);\n\n  const [phone, setPhone] = useState();\n  const [isOTPSent, SetIsOTPSent] = useState(false);\n\n  const [error, setError] = useState(null);\n\n  const onChangeHandler = (event) => {\n    const { name, value } = event.target;\n    setOtp(value);\n  };\n  const onChangePhone = (e) => {\n    const { name, value } = e.target;\n\n    setPhone(value);\n  };\n  const setUpRecaptcha = () => {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\n      'recaptcha-container',\n      {\n        size: 'visible',\n        callback: function (response) {\n          console.log('Captcha Resolved');\n          this.onSignInSubmit();\n        },\n        defaultCountry: 'IN',\n      }\n    );\n  };\n\n  const onSignInSubmit = (event) => {\n    event.preventDefault();\n    // var phoneNumber = getPhoneNumberFromUserInput();\n    setUpRecaptcha();\n    var phoneNumber = country + phone;\n    var appVerifier = window.recaptchaVerifier;\n    firebase\n      .auth()\n      .signInWithPhoneNumber(phoneNumber, appVerifier)\n      .then(function (confirmationResult) {\n        // SMS sent. Prompt user to type the code from the message, then sign the\n        // user in with confirmationResult.confirm(code).\n        window.confirmationResult = confirmationResult;\n        console.log('OTP is sent');\n        setShow(true);\n        SetIsOTPSent(true);\n        setError(null);\n      })\n      .catch(function (error) {\n        setShow(true);\n        setError(error);\n      });\n  };\n  const onSubmitOtp = (e) => {\n    e.preventDefault();\n    let otpInput = otp;\n    let optConfirm = window.confirmationResult;\n    // console.log(codee);\n    optConfirm\n      .confirm(otpInput)\n      .then(function (result) {\n        // User signed in successfully.\n        console.log('Result' + result.verificationID);\n        let user = result.user;\n        alert('Registration successful');\n        fetch(\"http://localhost:8000/auth\", {\n          method: \"GET\",\n        })\n          .then(res => res.json())\n          .then(data => console.log(data))\n      })\n      .catch(function (error) {\n        setShow(true);\n        setError(error);\n      });\n  };\n  return (\n    <div className=\"App\">\n      <Container fluid=\"md\" className=\"mt-3 bg-info p-5 shadow rounded\">\n        {isOTPSent && show && !error ? (\n          <Alert variant=\"success\" onClose={() => setShow(false)} dismissible>\n            Code Sent successfully\n          </Alert>\n        ) : null}\n        {error && show ? (\n          <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n            {error.message}\n          </Alert>\n        ) : null}\n        {!isOTPSent ? (\n          <Row className=\"d-flex justify-content-center align-items-center\">\n            <Col xs={12} md={6} lg={5}>\n              <h2 className=\"mb-3 text-center\">Login</h2>\n\n              <Form className=\"form\" onSubmit={onSignInSubmit}>\n                <Form.Label className=\"text-center\">\n                  {' '}\n                  We need to verify you are a human\n                </Form.Label>\n\n                <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                  <Form.Control\n                    as=\"select\"\n                    onChange={(e) => setCountry(e.target.value)}\n                  >\n                    {data.map((row) => (\n                      <option key={row.name} value={row.number}>\n                        {row.name}\n                      </option>\n                    ))}\n                  </Form.Control>\n                  {/* <Select\n                    defaultInputValue={country}\n                    value={country}\n                    onChange={(e) => setCountry(e.target.value)}\n                    options={mappedData}\n                  /> */}\n                </Form.Group>\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text id=\"basic-addon3\">\n                      {country}\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    id=\"basic-url\"\n                    aria-describedby=\"basic-addon3\"\n                    type=\"number\"\n                    name=\"phone\"\n                    placeholder=\"Mobile Number\"\n                    onChange={onChangePhone}\n                    required\n                  />\n                </InputGroup>\n                <div id=\"recaptcha-container\"></div>\n              <a href=\"http://localhost:8000\">hefgcggggllo</a>\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\n                  Submit\n                </button>\n              </Form>\n              {/* <button onClick={(e) => {\n                axios.get(\"http://localhost:8000/auth\")\n              }}>Code run</button> */}\n            </Col>\n          </Row>\n        ) : null}\n\n        {isOTPSent ? (\n          <Row className=\"d-flex justify-content-center align-items-center\">\n            <Col xs={12} md={6} lg={5}>\n              <h2 className=\"mb-3 text-center\">Enter OTP</h2>\n              <Form className=\"form\" onSubmit={onSubmitOtp}>\n                <Form.Group>\n                  <Form.Control\n                    id=\"otp\"\n                    type=\"number\"\n                    name=\"otp\"\n                    placeholder=\"OTP\"\n                    onChange={onChangeHandler}\n                  />\n                </Form.Group>\n                <div id=\"recaptcha-container\"></div>\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\n                  Submit\n                </button>\n\n                <a\n                  href=\"#\"\n                  className=\"text-white text-center\"\n                  onClick={onSignInSubmit}\n                >\n                  Resend Code\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"text-white text-center mx-4\"\n                  onClick={() => {\n                    setOtp('');\n                    setShow(false);\n                    SetIsOTPSent(false);\n                  }}\n                >\n                  Back\n                </a>\n              </Form>\n            </Col>\n          </Row>\n        ) : null}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}